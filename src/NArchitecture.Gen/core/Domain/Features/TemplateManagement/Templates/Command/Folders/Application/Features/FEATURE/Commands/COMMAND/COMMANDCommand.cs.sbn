{{ if is_secured_operation_used }}using {{ project_name }}.Application.Features.{{ feature_name }}.Constants;
{{ end }}{{ if is_logging_used }}using NArchitecture.Core.Application.Pipelines.Logging;
{{ end }}{{ if is_transaction_used }}using NArchitecture.Core.Application.Pipelines.Transaction;
{{ end }}{{ if is_secured_operation_used }}using NArchitecture.Core.Application.Pipelines.Auth;
{{ end }}{{ if is_caching_used }}using NArchitecture.Core.Application.Pipelines.Caching;
{{ end }}using NArchitecture.Core.Mediator.Abstractions.CQRS;

namespace {{ project_name }}.Application.Features.{{ feature_name }}.Commands.{{ command_name | string.pascalcase }};

public record {{ command_name | string.pascalcase }}Command({{ if is_secured_operation_used }}
    string[] IdentityRoles{{ end }}
) : ICommand<{{ command_name | string.pascalcase }}Response>{{ if is_logging_used }}, ILoggableRequest{{ end }}{{ if is_transaction_used }}, ITransactionalRequest{{ end }}{{ if is_secured_operation_used }}, ISecuredRequest{{ end }}{{ if is_caching_used }}, ICacheRemoverRequest{{ end }}
{%{{}%}{{ if is_secured_operation_used }}
    public static readonly string[] RequiredRoles = [{{ feature_name }}OperationClaims.Admin, {{ feature_name }}OperationClaims.Write, {{ feature_name }}OperationClaims.{{ command_name | string.pascalcase }}];
    public AuthOptions AuthOptions => new(IdentityRoles, RequiredRoles);{{ end }}{{ if is_logging_used }}
    public LogOptions LogOptions => LogOptions.Default;{{ end }}{{ if is_caching_used }}
    public CacheRemoverOptions CacheOptions => new(
        BypassCache: false,
        CacheKey: null,
        CacheGroupKey: ["Get{{ feature_name | string.pascalcase }}"]
    );{{ end }}
}
