{{ if is_secured_operation_used }}using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Constants;
{{ end }}using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Rules;
using Application.Services.Repositories;
using AutoMapper;
using Domain.Entities;{{ if is_secured_operation_used }}
using NArchitecture.Core.Application.Pipelines.Auth;{{ end }}{{ if is_caching_used }}
using NArchitecture.Core.Application.Pipelines.Caching;{{ end }}
using MediatR;{{ if is_secured_operation_used }}

namespace {{ project_name }}.Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetById;

public class GetById{{ entity.name | string.pascalcase }}Query : IRequest<GetById{{ entity.name | string.pascalcase }}Response>{{ if is_secured_operation_used }}, ISecuredRequest{{ end }}{{ if is_caching_used }}, ICacheableRequest{{ end }}
{
    public {{ entity.id_type }} Id { get; set; }{{ if is_secured_operation_used }}
    public required string[] IdentityRoles { get; set; }

    public static readonly string[] RequiredRoles = [{{ entity.name | string.pascalcase | string.plural }}OperationClaims.Admin, {{ entity.name | string.pascalcase | string.plural }}OperationClaims.Read];
    public AuthOptions AuthOptions => new(IdentityRoles, RequiredRoles);{{ end }}{{ if is_caching_used }}

    public CacheableOptions CacheOptions => new(
        BypassCache: false,
        CacheKey: $"GetById{{ entity.name | string.pascalcase }}({Id})",
        CacheGroupKey: "Get{{ entity.name | string.pascalcase | string.plural }}",
        SlidingExpiration: null
    );{{ end }}

    public class GetById{{ entity.name | string.pascalcase }}QueryHandler : IRequestHandler<GetById{{ entity.name | string.pascalcase }}Query, GetById{{ entity.name | string.pascalcase }}Response>
    {
        private readonly IMapper _mapper;
        private readonly I{{ entity.name | string.pascalcase }}Repository _{{ entity.name | string.camelcase }}Repository;
        private readonly {{ entity.name | string.pascalcase }}BusinessRules _{{ entity.name | string.camelcase }}BusinessRules;

        public GetById{{ entity.name | string.pascalcase }}QueryHandler(IMapper mapper, I{{ entity.name | string.pascalcase }}Repository {{ entity.name | string.camelcase }}Repository, {{ entity.name | string.pascalcase }}BusinessRules {{ entity.name | string.camelcase }}BusinessRules)
        {
            _mapper = mapper;
            _{{ entity.name | string.camelcase }}Repository = {{ entity.name | string.camelcase }}Repository;
            _{{ entity.name | string.camelcase }}BusinessRules = {{ entity.name | string.camelcase }}BusinessRules;
        }

        public async Task<GetById{{ entity.name | string.pascalcase }}Response> Handle(GetById{{ entity.name | string.pascalcase }}Query request, CancellationToken cancellationToken)
        {
            {{ entity.name | string.pascalcase }}? {{ entity.name | string.camelcase }} = await _{{ entity.name | string.camelcase }}Repository.GetAsync(predicate: {{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.Id == request.Id, cancellationToken: cancellationToken);
            await _{{ entity.name | string.camelcase }}BusinessRules.{{ entity.name | string.pascalcase }}ShouldExistWhenSelected({{ entity.name | string.camelcase }});

            GetById{{ entity.name | string.pascalcase }}Response response = _mapper.Map<GetById{{ entity.name | string.pascalcase }}Response>({{ entity.name | string.camelcase }});
            return response;
        }
    }
}