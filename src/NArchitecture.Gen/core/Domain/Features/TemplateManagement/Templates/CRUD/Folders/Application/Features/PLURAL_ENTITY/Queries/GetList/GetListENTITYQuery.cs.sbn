{{ if is_secured_operation_used }}using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Constants;
{{ end }}using Application.Services.Repositories;
using AutoMapper;
using Domain.Entities;{{ if is_secured_operation_used }}
using NArchitecture.Core.Application.Pipelines.Auth;{{ end }}{{ if is_caching_used }}
using NArchitecture.Core.Application.Pipelines.Caching;{{ end }}
using NArchitecture.Core.Application.Requests;
using NArchitecture.Core.Application.Responses;
using NArchitecture.Core.Persistence.Paging;
using MediatR;{{ if is_secured_operation_used }}

namespace {{ project_name }}.Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetList;

public class GetList{{ entity.name | string.pascalcase }}Query : IRequest<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>{{ if is_secured_operation_used }}, ISecuredRequest{{ end }}{{ if is_caching_used }}, ICacheableRequest{{ end }}
{
    public PageRequest PageRequest { get; set; }{{ if is_secured_operation_used }}
    public required string[] IdentityRoles { get; set; }

    public static readonly string[] RequiredRoles = [{{ entity.name | string.pascalcase | string.plural }}OperationClaims.Admin, {{ entity.name | string.pascalcase | string.plural }}OperationClaims.Read];
    public AuthOptions AuthOptions => new(IdentityRoles, RequiredRoles);{{ end }}{{ if is_caching_used }}

    public CacheableOptions CacheOptions => new(
        BypassCache: false,
        CacheKey: $"GetList{{ entity.name | string.pascalcase | string.plural }}({PageRequest.PageIndex},{PageRequest.PageSize})",
        CacheGroupKey: "Get{{ entity.name | string.pascalcase | string.plural }}",
        SlidingExpiration: null
    );{{ end }}

    public class GetList{{ entity.name | string.pascalcase }}QueryHandler : IRequestHandler<GetList{{ entity.name | string.pascalcase }}Query, GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>
    {
        private readonly I{{ entity.name | string.pascalcase }}Repository _{{ entity.name | string.camelcase }}Repository;
        private readonly IMapper _mapper;

        public GetList{{ entity.name | string.pascalcase }}QueryHandler(I{{ entity.name | string.pascalcase }}Repository {{ entity.name | string.camelcase }}Repository, IMapper mapper)
        {
            _{{ entity.name | string.camelcase }}Repository = {{ entity.name | string.camelcase }}Repository;
            _mapper = mapper;
        }

        public async Task<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>> Handle(GetList{{ entity.name | string.pascalcase }}Query request, CancellationToken cancellationToken)
        {
            IPaginate<{{ entity.name | string.pascalcase }}> {{ entity.name | string.camelcase | string.plural }} = await _{{ entity.name | string.camelcase }}Repository.GetListAsync(
                index: request.PageRequest.PageIndex,
                size: request.PageRequest.PageSize, 
                cancellationToken: cancellationToken
            );

            GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto> response = _mapper.Map<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>>({{ entity.name | string.camelcase | string.plural }});
            return response;
        }
    }
}